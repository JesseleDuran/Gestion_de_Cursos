/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package miniproyecto1.views;

import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import miniproyecto1.controllers.Controller;
import miniproyecto1.dbConnections.MySQLdbConnection;
import miniproyecto1.models.Horario;
import miniproyecto1.utils.PDFGenerator;

/**
 *
 * @author Mota
 */
public class MenuView extends javax.swing.JFrame {

    /**
     * Creates new form MenuView
     */
    public MenuView(MySQLdbConnection db) {
        super("Menú Principal");
        initComponents();
        this.db = db;
        initButtons();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar = new javax.swing.JMenuBar();
        registrarMenu = new javax.swing.JMenu();
        verMenu = new javax.swing.JMenu();
        reportesMenu = new javax.swing.JMenu();
        horariosReporte = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        menuBar.setAlignmentX(0.9F);

        registrarMenu.setText("Registrar");
        registrarMenu.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        menuBar.add(registrarMenu);

        verMenu.setText("Ver");
        verMenu.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        menuBar.add(verMenu);

        reportesMenu.setText("Reportes");

        horariosReporte.setText("Horarios");
        horariosReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horariosReporteActionPerformed(evt);
            }
        });
        reportesMenu.add(horariosReporte);

        menuBar.add(reportesMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 489, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 324, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void horariosReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horariosReporteActionPerformed
        // TODO add your handling code here:
        Controller<Horario> ctrl = new Controller<Horario>(Horario.class);
        
        String result;
        try {
            result = PDFGenerator.createPDFFromHashMapList(this, ctrl.getAll(db));
            Desktop.getDesktop().open(new File(result));
        } catch (Exception ex) {
            //TODO Añadir error ! 
        }
        
    }//GEN-LAST:event_horariosReporteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem horariosReporte;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu registrarMenu;
    private javax.swing.JMenu reportesMenu;
    private javax.swing.JMenu verMenu;
    // End of variables declaration//GEN-END:variables
    MySQLdbConnection db;
    private void initButtons()
    {
        addRegistrar();
        addEdit();
    }
    
    private void addRegistrar()
    {
        JMenuItem participante = new JMenuItem("Participante");
        participante.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) 
            {
                ClienteRegisterView clienteRegisterView = new ClienteRegisterView(db);
                clienteRegisterView.setVisible(true);
            }
        });
        registrarMenu.add(participante); 
        
        JMenuItem instructor = new JMenuItem("Instructor");
        instructor.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) 
            {
                InstructorRegisterView instructorRegisterView = null;
                try {
                    instructorRegisterView = new InstructorRegisterView(db);
                } catch (Exception ex) {
                    Logger.getLogger(MenuView.class.getName()).log(Level.SEVERE, null, ex);
                }
                instructorRegisterView.setVisible(true);
            }
        });
        registrarMenu.add(instructor);
        
        JMenuItem curso = new JMenuItem("Curso");
        curso.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) 
            {
                CursoRegisterView cursoRegisterView = null;
                try {
                    cursoRegisterView = new CursoRegisterView(db);
                } catch (Exception ex) {
                    Logger.getLogger(MenuView.class.getName()).log(Level.SEVERE, null, ex);
                }
                cursoRegisterView.setVisible(true);
            }
        });
        registrarMenu.add(curso);
        
        JMenuItem admin = new JMenuItem("Administrador");
        admin.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) 
            {
                AdminRegisterView adminRegisterView = new AdminRegisterView(db);
                adminRegisterView.setVisible(true);
            }
        });
        registrarMenu.add(admin);
        
        JMenuItem horario = new JMenuItem("Horario");
        horario.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) 
            {
                HorarioRegisterView horarioRegisterView = new HorarioRegisterView(db);
                horarioRegisterView.setVisible(true);
            }
        });
        registrarMenu.add(horario);
        
        JMenuItem aula = new JMenuItem("Aula");
        aula.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) 
            {
                ClienteRegisterView clienteRegisterView = new ClienteRegisterView(db);
                clienteRegisterView.setVisible(true);
            }
        });
        registrarMenu.add(aula);            
    }
    
    private void addEdit()
    {
        JMenuItem participante = new JMenuItem("Participante");
        participante.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) 
            {
                try {
                    ClienteIndexView clienteEditView = new ClienteIndexView(db);
                    clienteEditView.setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(MenuView.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        });
        verMenu.add(participante); 
        
        JMenuItem instructor = new JMenuItem("Instructor");
        instructor.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) 
            {
                InstructorIndexView instructorEditView = null;
                try {
                    instructorEditView = new InstructorIndexView(db);
                } catch (Exception ex) {
                    Logger.getLogger(MenuView.class.getName()).log(Level.SEVERE, null, ex);
                }
                instructorEditView.setVisible(true);
            }
        });
        verMenu.add(instructor);
        
        JMenuItem curso = new JMenuItem("Curso");
        curso.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) 
            {
                
                try {
                    CursoIndexView cursoEditView = new CursoIndexView(db);
                    cursoEditView.setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(MenuView.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        });
        verMenu.add(curso);
        
        JMenuItem admin = new JMenuItem("Administrador");
        admin.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) 
            {
               AdminIndexView adminEditView;
                try {
                    adminEditView = new AdminIndexView(db);
                    adminEditView.setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(MenuView.class.getName()).log(Level.SEVERE, null, ex);
                }
               
            }
        });
        verMenu.add(admin);
        
        JMenuItem horario = new JMenuItem("Horario");
        horario.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) 
            {
                try {
                    HorarioIndexView horarioEditView = new HorarioIndexView(db);
                    horarioEditView.setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(MenuView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        verMenu.add(horario);
        
        JMenuItem aula = new JMenuItem("Aula");
        aula.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) 
            {
                ClienteRegisterView clienteRegisterView = new ClienteRegisterView(db);
                clienteRegisterView.setVisible(true);
            }
        });
        verMenu.add(aula);            
    }
    
    
    
}
